{"version":3,"sources":["AppContainer.styled.ts","styles/medias.ts","ContentContainer.styled.ts","components/common/H1.styled.ts","components/common/VerticalFlexbox.styled.ts","components/Title.tsx","form/styled/AddDataCell.styled.tsx","form/constants.ts","styles/theme.ts","form/AddData.tsx","form/Data.interface.ts","form/DataCell.tsx","form/styled/DataColumnContainer.styled.ts","form/DataColumn.tsx","form/styled/DataColumnsContainer.styled.ts","form/DataGrid.tsx","form/styled/Cell.styled.tsx","form/styled/LegendContainer.styled.ts","form/Legend.tsx","form/styled/DataGridContainer.styled.ts","form/validateColumn.ts","area/AreaContainer.ts","area/InlineInput.tsx","area/Area.tsx","area/Area.interface.ts","area/DataCard.styled.ts","styles/constants.ts","area/ResultContainer.styled.ts","components/common/H3.styled.ts","area/Result.tsx","area/checkPeriodStatus.ts","area/integrate.ts","area/useAreaBetweenCurves.ts","chart/filterColumns.ts","chart/getStudiedData.ts","chart/Chart.tsx","chart/ChartCard.styled.ts","form/Form.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AppContainer","styled","div","props","theme","fonts","main","colors","darkGrey","backgroundColors","customMediaQuery","width","size","device","mobile","mobileL","tablet","desktop","ContentContainer","H1","p","color","secondary","VerticalFlexbox","alignItems","justifyContent","margin","height","border","borderRadius","padding","Title","AddDataCell","githubGrey","black","white","beige","lightBlue","darkBlue","lightBrown","darkBrown","orange","yellow","chartBlue","chartGreen","chartOrange","chartPurple","chartRed","chartYellow","grey","lightGrey","lightestGrey","flagGrey","green","lightGreen","googleRed","paleRed","lightPaleRed","red","lightRed","flagRed","gold","sand","card","DataNames","StyledCircle","AddCircle","AddData","addColumn","onClick","StyledInput","input","last","bottom","DataCell","value","updateCell","rest","type","replace","onChange","event","newValue","currentTarget","exec","formattedValue","DataColumnContainer","DataColumn","columnData","updateColumn","age","expectedWeight","measuredWeight","dataName","newColumnData","top","centered","DataColumnsContainer","DataGrid","data","columns","map","index","isLast","length","key","StyledCell","topLeft","bottomRight","bottomLeft","topRight","LegendContainer","Legend","DataGridContainer","validateColumn","column","Number","AreaContainer","isPeriodValid","InlineInput","updateValue","PeriodStatus","Text","Area","from","setFrom","setTo","to","screenWidth","window","innerWidth","console","info","DataCard","ResultContainer","H3","bold","Bold","span","Result","area","period","checkPeriodStatus","Default","ages","Math","min","max","Wrong","Valid","integrate","interval","intercept","slope","xStart","xEnd","f","x","toFixed","total","step","useAreaBetweenCurves","intervals","useState","setArea","intervalYStartExpected","setIntervalYStartExpected","intervalYEndExpected","setIntervalYEndExpected","intervalYStartMeasured","setIntervalYStartMeasured","intervalYEndMeasured","setIntervalYEndMeasured","i","xStartFromColumn","xEndFromColumn","yEndFromColumnExpected","yEndFromColumnMeasured","yStartFromColumnExpected","yStartFromColumnMeasured","expectedWeightSlope","measuredWeightSlope","expectedWeightIntercept","measuredWeightIntercept","newIntervalYStartExpected","newIntervalYStartMeasured","newIntervalYEndExpected","newIntervalYEndMeasured","push","expectedWeightInterval","measuredWeightInterval","formattedResult","reduce","studiedIntervals","filterColumns","filteredData","filter","dataPoint","isValidated","expectedWeights","measuredWeights","getStudiedData","updatedExpectedWeights","cloneDeep","updatedMeasuredWeights","startIndex","findIndex","endIndex","includes","sort","a","b","splice","studiedAges","studiedWeightsExpected","studiedWeightsMeasured","studiedDataExpected","weight","y","studiedDataMeasured","Charts","definitiveExpectedWeights","definitiveMeasuredWeights","studiedDatasetExpected","studiedDatasetMeasured","studiedData","expectedWeightsData","measuredWeightsData","dataToRender","datasets","label","backgroundColor","fill","borderColor","borderWidth","pointBackgroundColor","pointBorderColor","pointBorderWidth","pointRadius","pointHitRadius","lineTension","xAxisID","yAxisID","order","options","maintainAspectRatio","legend","display","tooltips","enabled","mode","layout","left","right","scales","yAxes","id","scaleLabel","ticks","autoSkip","maxTicksLimit","xAxes","ChartCard","defaultData","Form","initialData","setColumns","setIsPeriodValid","updatedIsPeriodValid","newData","forEach","isColumnValid","updatedColumn","Chart","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.35539ff3.chunk.js","sourcesContent":["import styled from \"styled-components\";\n\nconst AppContainer: React.FC = styled.div`\n  position: absolute;\n  font-family: ${(props) => props.theme.fonts.main};\n  color: ${(props) => props.theme.colors.darkGrey};\n  background-color: ${(props) => props.theme.backgroundColors.main};\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  width: 100%;\n  height: 100%;\n  overflow-y: auto;\n`;\n\nexport default AppContainer;\n","const customMediaQuery = (width: number): string =>\n  `@media (min-width: ${width}px)`;\n\nconst size = {\n  mobile: 300,\n  mobileL: 500,\n  tablet: 768,\n  desktop: 922,\n};\n\nexport const device = {\n  mobile: customMediaQuery(size.mobile),\n  mobileL: customMediaQuery(size.mobileL),\n  tablet: customMediaQuery(size.tablet),\n  desktop: customMediaQuery(size.desktop),\n};\n\nexport default device;\n","import styled from \"styled-components\";\n\nimport device from \"./styles/medias\";\n\nconst ContentContainer: React.FC = styled.div`\n  position: relative;\n  font-family: ${(props) => props.theme.fonts.main};\n  color: ${(props) => props.theme.colors.darkGrey};\n  background-color: ${(props) => props.theme.backgroundColors.main};\n  height: 100%;\n\n  ${device.mobile} {\n    width: 100vw;\n    max-width: 100vw;\n  }\n\n  ${device.desktop} {\n    width: 922px;\n    margin-left: auto;\n    margin-right: auto;\n  }\n`;\n\nexport default ContentContainer;\n","import styled, { Theme } from \"styled-components\";\n\nimport device from \"../../styles/medias\";\n\nconst H1: React.FC = styled.p<{\n  color: string;\n  theme: Theme;\n}>`\n  color: ${(props) => props.color || props.theme.colors.darkGrey};\n  font-family: ${(props) => props.theme.fonts.secondary};\n  text-align: center;\n  font-weight: 600;\n\n  ${device.mobile} {\n    font-size: 18px;\n    margin: 18px 0 10px 0;\n    padding: 0 10px 0 10px;\n  }\n\n  ${device.desktop} {\n    font-size: 20px;\n    margin: 20px 0 20px 0;\n    padding: 0 20px 0 20px;\n  }\n`;\n\nexport default H1;\n","import styled from \"styled-components\";\n\ninterface VerticalFlexboxProps {\n  readonly alignItems?: string;\n  readonly justifyContent?: string;\n  readonly margin?: string;\n  readonly width?: string;\n  readonly minWidth?: string;\n  readonly height?: string;\n  readonly border?: string;\n  readonly borderRadius?: string;\n  readonly padding?: string;\n}\n\nconst VerticalFlexbox: React.FC<VerticalFlexboxProps> = styled.div<\n  VerticalFlexboxProps\n>`\n  display: flex;\n  flex-direction: column;\n  align-items: ${(props) => props.alignItems || \"safe center\"};\n  justify-content: ${(props) => props.justifyContent || \"safe center\"};\n  margin: ${(props) => props.margin || \"auto\"};\n  width: ${(props) => props.width || \"100%\"};\n  min-width: ${(props) => props.width || \"\"};\n  height: ${(props) => props.height || \"auto\"};\n  border: ${(props) => props.border || \"0\"};\n  border-radius: ${(props) => props.borderRadius || \"0\"};\n  padding: ${(props) => props.padding || \"0\"};\n  background-color: ${(props) => props.theme.backgroundColors.main};\n`;\n\nexport default VerticalFlexbox;\n","import React from \"react\";\n\nimport H1 from \"./common/H1.styled\";\nimport VerticalFlexbox from \"./common/VerticalFlexbox.styled\";\n\nconst TITLE =\n  \"Évaluez le risque d'arrêt de croissance pour un patient anorexique prépubère\";\n\nconst Title: React.FC = () => {\n  return (\n    <VerticalFlexbox>\n      <H1>{TITLE}</H1>\n    </VerticalFlexbox>\n  );\n};\n\nexport default Title;\n","import styled from \"styled-components\";\n\nimport device from \"../../styles/medias\";\nimport {\n  ADD_DATA_HEIGHT,\n  ADD_DATA_WIDTH,\n  ADD_DATA_WIDTH_MOBILE,\n  GRID_BORDER_RADIUS,\n  GRID_HEIGHT_MOBILE,\n} from \"../constants\";\n\nconst AddDataCell: React.FC = styled.div`\n  background-color: transparent;\n\n  border-color: ${(props) => props.theme.colors.githubGrey};\n  border-style: solid;\n  border-width: 2px;\n\n  border-bottom-right-radius: ${GRID_BORDER_RADIUS};\n\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  ${device.mobile} {\n    border-top-width: 0px;\n    font-size: 14px;\n\n    height: ${GRID_HEIGHT_MOBILE};\n    width: ${ADD_DATA_WIDTH_MOBILE};\n\n    border-bottom-left-radius: ${GRID_BORDER_RADIUS};\n  }\n\n  ${device.mobileL} {\n    border-left-width: 0px;\n    border-top-width: 2px;\n\n    height: ${ADD_DATA_HEIGHT};\n    width: ${ADD_DATA_WIDTH};\n\n    border-top-right-radius: ${GRID_BORDER_RADIUS};\n    border-bottom-left-radius: 0px;\n  }\n`;\n\nexport default AddDataCell;\n","const GRID_BORDER_RADIUS = \"6px\";\nconst GRID_HEIGHT = \"120px\";\nconst GRID_HEIGHT_MOBILE = \"40px\";\nconst DATA_WIDTH = \"62px\";\nconst LEGEND_WIDTH = \"120px\";\nconst LEGEND_WIDTH_MOBILE = \"80px\";\nconst DATA_WIDTH_MOBILE = LEGEND_WIDTH_MOBILE;\nconst ADD_DATA_HEIGHT = \"116px\";\nconst ADD_DATA_WIDTH = DATA_WIDTH;\nconst ADD_DATA_WIDTH_MOBILE = \"244PX\";\n\nexport {\n  ADD_DATA_HEIGHT,\n  ADD_DATA_WIDTH,\n  ADD_DATA_WIDTH_MOBILE,\n  GRID_BORDER_RADIUS,\n  GRID_HEIGHT,\n  GRID_HEIGHT_MOBILE,\n  DATA_WIDTH,\n  DATA_WIDTH_MOBILE,\n  LEGEND_WIDTH,\n  LEGEND_WIDTH_MOBILE,\n};\n","const theme = {\n  fonts: {\n    main: '\"Noto Sans\", sans-serif;',\n    secondary: '\"Open Sans\", sans-serif',\n  },\n  colors: {\n    black: \"#151515\",\n    white: \"white\",\n\n    beige: \"#FEFCFA\",\n    lightBlue: \"#8FE5FF\",\n    darkBlue: \"#1C728C\",\n    lightBrown: \"#FFBF8F\",\n    darkBrown: \"#99520A\",\n    orange: \"#FF964F\",\n    yellow: \"#FFE5A6\",\n\n    chartBlue: \"#3671FF\",\n    chartGreen: \"#5DE686\",\n    chartOrange: \"#E3A736\",\n    chartPurple: \"#B373E6\",\n    chartRed: \"#FF4A42\",\n    chartYellow: \"#D6E342\",\n\n    grey: \"#818e96\",\n    darkGrey: \"#404040\", // main text color\n    lightGrey: \"#b3b8bb\",\n    lightestGrey: \"#cdd3d6\",\n    githubGrey: \"#211f1f\",\n    flagGrey: \"#fffefa\",\n\n    green: \"#1aab00\",\n    lightGreen: \"#68C251\",\n\n    googleRed: \"#d34836\",\n    paleRed: \"#FF6E6B\",\n    lightPaleRed: \"rgba(255, 97, 0, 0.3)\",\n    red: \"#FF3232\",\n    lightRed: \"rgba(255, 50, 50, 0.3)\",\n    flagRed: \"#FF594A\",\n\n    gold: \"#ffcd1f\",\n    sand: \"#FFFCF5\",\n  },\n  backgroundColors: {\n    card: \"white\",\n    main: \"#FFFCF5\",\n  },\n};\n\nexport default theme;\n","import { AddCircle } from \"@styled-icons/ionicons-outline\";\nimport React from \"react\";\nimport styled from \"styled-components\";\n\nimport AddDataCell from \"./styled/AddDataCell.styled\";\n\nimport theme from \"../styles/theme\";\n\ninterface Props {\n  addColumn: () => void;\n}\n\nconst AddData: React.FC<Props> = (props: Props) => {\n  const { addColumn } = props;\n\n  return (\n    <AddDataCell>\n      <StyledCircle\n        color={theme.colors.chartBlue}\n        onClick={addColumn}\n        size={36}\n      />\n    </AddDataCell>\n  );\n};\n\nconst StyledCircle = styled(AddCircle)`\n  &:hover {\n    cursor: pointer;\n  }\n`;\n\nexport default AddData;\n","export interface Column {\n  age: string;\n  expectedWeight: string;\n  measuredWeight: string;\n  isValidated: boolean;\n}\n\nexport enum DataNames {\n  age = \"age\",\n  expectedWeight = \"expectedWeight\",\n  measuredWeight = \"measuredWeight\",\n}\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport { DATA_WIDTH_MOBILE, GRID_HEIGHT_MOBILE } from \"./constants\";\n\nimport device from \"../styles/medias\";\n\ninterface Props {\n  value: string;\n  updateCell: (value: string) => void;\n  centered?: boolean;\n  last: boolean;\n  bottom?: boolean;\n\n  top?: boolean;\n}\n\nconst DataCell: React.FC<Props> = (props: Props) => {\n  const { value, updateCell, ...rest } = props;\n\n  // TODO: is it working with commas ??, replace before display instead\n  const handleChange = (event: React.FormEvent<HTMLInputElement>) => {\n    const { value: newValue } = event.currentTarget;\n    if (/[\\d.,]*/i.exec(newValue)) {\n      const formattedValue = newValue.replace(\",\", \".\");\n      updateCell(formattedValue);\n    }\n  };\n\n  return (\n    <StyledInput\n      type=\"text\"\n      value={value.replace(\".\", \",\")}\n      onChange={handleChange}\n      {...rest}\n    />\n  );\n};\n\ninterface StyledInputProps {\n  readonly bottomLeft?: boolean;\n  readonly bottomRight?: boolean;\n  readonly centered?: boolean;\n  readonly last?: boolean;\n\n  readonly bottom?: boolean;\n  readonly top?: boolean;\n  readonly topLeft?: boolean;\n  readonly topRight?: boolean;\n  readonly padding?: string;\n}\n\nconst StyledInput = styled.input<StyledInputProps>`\n  background-color: ${(props) => props.theme.backgroundColors.card};\n\n  border-color: ${(props) => props.theme.colors.githubGrey};\n  border-style: solid;\n  border-width: 2px;\n\n  color: ${(props) => props.theme.colors.darkGrey};\n  font-family: ${(props) => props.theme.fonts.main};\n\n  margin: 0;\n\n  text-align: center;\n  padding: 0;\n  :focus {\n    border-color: ${(props) => props.theme.colors.chartOrange};\n    z-index: 10;\n  }\n\n  &:hover {\n    cursor: pointer;\n  }\n\n  ${device.mobile} {\n    font-size: 14px;\n    height: ${GRID_HEIGHT_MOBILE};\n    width: ${DATA_WIDTH_MOBILE};\n\n    border-bottom-width: ${(props) => (props.last ? \"2px\" : \"0px\")};\n    border-right-width: ${(props) => (props.bottom ? \"2px\" : \"0px\")};\n  }\n\n  ${device.mobileL} {\n    height: 100%;\n    width: 60px;\n\n    border-bottom-width: ${(props) => (props.bottom ? \"2px\" : \"0px\")};\n    border-right-width: 2px;\n  }\n\n  ${device.desktop} {\n    height: 100%;\n    font-size: 16px;\n  }\n`;\n\nexport default DataCell;\n","import styled from \"styled-components\";\n\nimport device from \"../../styles/medias\";\nimport { DATA_WIDTH, DATA_WIDTH_MOBILE } from \"../constants\";\n\nconst DataColumnContainer: React.FC = styled.div`\n  display: flex;\n  justify-content: center;\n  margin: 0;\n  width: ${DATA_WIDTH};\n  min-width: ${DATA_WIDTH};\n\n  ${device.mobile} {\n    flex-direction: row;\n    width: ${DATA_WIDTH_MOBILE};\n    min-width: ${DATA_WIDTH_MOBILE};\n  }\n\n  ${device.mobileL} {\n    flex-direction: column;\n    width: ${DATA_WIDTH};\n    min-width: ${DATA_WIDTH};\n  }\n`;\n\nexport default DataColumnContainer;\n","import React from \"react\";\n\nimport { Column, DataNames } from \"./Data.interface\";\nimport DataCell from \"./DataCell\";\nimport DataColumnContainer from \"./styled/DataColumnContainer.styled\";\n\ninterface Props {\n  columnData: Column;\n  last: boolean;\n  updateColumn: (columnData: Column) => void;\n}\n\nconst DataColumn: React.FC<Props> = (props: Props) => {\n  const { columnData, last, updateColumn } = props;\n  const { age, expectedWeight, measuredWeight } = columnData;\n\n  const updateCell = (dataName: DataNames, value: string) => {\n    //formatting logic\n    const newColumnData = { ...columnData };\n    newColumnData[dataName] = value;\n    updateColumn(newColumnData);\n  };\n\n  const updateAge = (value: string) => updateCell(DataNames.age, value);\n  const updateExpectedWeight = (value: string) =>\n    updateCell(DataNames.expectedWeight, value);\n  const updateMeasuredWeight = (value: string) =>\n    updateCell(DataNames.measuredWeight, value);\n\n  return (\n    <DataColumnContainer>\n      <DataCell last={last} top centered value={age} updateCell={updateAge} />\n      <DataCell\n        last={last}\n        value={expectedWeight}\n        updateCell={updateExpectedWeight}\n      />\n      <DataCell\n        bottom\n        last={last}\n        value={measuredWeight}\n        updateCell={updateMeasuredWeight}\n      />\n    </DataColumnContainer>\n  );\n};\n\nexport default DataColumn;\n","import styled from \"styled-components\";\n\nimport device from \"../../styles/medias\";\nimport { GRID_HEIGHT } from \"../constants\";\n\nconst DataColumnsContainer: React.FC = styled.div`\n  display: flex;\n  justify-content: flex-start;\n  margin: auto;\n\n  background-color: transparent;\n\n  ${device.mobile} {\n    flex-direction: column;\n    margin-top: 0;\n  }\n\n  ${device.mobileL} {\n    height: ${GRID_HEIGHT};\n    flex-direction: row;\n    margin-left: 0;\n  }\n`;\n\nexport default DataColumnsContainer;\n","import React from \"react\";\n\nimport { Column } from \"./Data.interface\";\nimport DataColumn from \"./DataColumn\";\nimport DataColumnsContainer from \"./styled/DataColumnsContainer.styled\";\n\ninterface Props {\n  data: Column[];\n  updateColumn: (columnData: Column, index: number) => void;\n}\n\nconst DataGrid: React.FC<Props> = (props: Props) => {\n  const { data, updateColumn } = props;\n\n  const columns = data.map((columnData, index) => {\n    const indexedUpdateColumn = (columnData: Column) =>\n      updateColumn(columnData, index);\n    const isLast = index === data.length - 1;\n\n    return (\n      <DataColumn\n        columnData={columnData}\n        key={index}\n        last={isLast}\n        updateColumn={indexedUpdateColumn}\n      />\n    );\n  });\n\n  return <DataColumnsContainer>{columns}</DataColumnsContainer>;\n};\n\nexport default DataGrid;\n","import styled from \"styled-components\";\n\nimport device from \"../../styles/medias\";\nimport {\n  GRID_BORDER_RADIUS,\n  LEGEND_WIDTH,\n  LEGEND_WIDTH_MOBILE,\n} from \"../constants\";\n\ninterface Props {\n  readonly bottomLeft?: boolean;\n  readonly bottomRight?: boolean;\n  readonly centered?: boolean;\n  readonly top?: boolean;\n  readonly topLeft?: boolean;\n  readonly topRight?: boolean;\n}\n\nconst StyledCell: React.FC<Props> = styled.div<Props>`\n  background-color: ${(props) => props.theme.backgroundColors.card};\n\n  border-color: ${(props) => props.theme.colors.githubGrey};\n  border-style: solid;\n  border-width: 2px;\n\n  border-top-left-radius: ${(props) =>\n    props.topLeft ? GRID_BORDER_RADIUS : \"0px\"};\n\n  color: ${(props) => props.theme.colors.darkGrey};\n  font-family: ${(props) => props.theme.fonts.main};\n\n  display: flex;\n  justify-content: center;\n\n  height: 100%;\n\n  ${device.mobile} {\n    align-items: center;\n    font-size: 14px;\n    text-align: center;\n\n    flex-direction: row;\n\n    width: ${LEGEND_WIDTH_MOBILE};\n    border-bottom-right-radius: ${(props) =>\n      props.bottomRight ? GRID_BORDER_RADIUS : \"0px\"};\n    border-top-right-radius: ${(props) =>\n      props.bottomLeft ? GRID_BORDER_RADIUS : \"0px\"};\n    border-right-width: ${(props) => (props.bottomLeft ? \"2px\" : \"0px\")};\n\n    border-bottom-width: 0px;\n  }\n\n  ${device.mobileL} {\n    align-items: flex-start;\n    flex-direction: column;\n    width: ${LEGEND_WIDTH};\n\n    border-bottom-left-radius: ${(props) =>\n      props.bottomLeft ? GRID_BORDER_RADIUS : \"0px\"};\n    border-bottom-right-radius: ${(props) =>\n      props.bottomRight ? GRID_BORDER_RADIUS : \"0px\"};\n    border-top-right-radius: ${(props) =>\n      props.topRight ? GRID_BORDER_RADIUS : \"0px\"};\n    border-right-width: 0px;\n    border-bottom-width: 2px;\n\n    margin-top: ${(props) => (props.top ? \"0px\" : \"-2px\")};\n\n    padding-left: 10px;\n    text-align: left;\n  }\n\n  ${device.desktop} {\n    font-size: 16px;\n  }\n`;\n\nexport default StyledCell;\n","import styled from \"styled-components\";\n\nimport device from \"../../styles/medias\";\nimport { GRID_HEIGHT, GRID_HEIGHT_MOBILE } from \"../constants\";\n\nconst LegendContainer: React.FC = styled.div`\n  display: flex;\n  align-items: safe center;\n  justify-content: safe center;\n\n  margin: auto;\n  background-color: ${(props) => props.theme.backgroundColors.card};\n\n  ${device.mobile} {\n    height: ${GRID_HEIGHT_MOBILE};\n    flex-direction: row;\n    padding-top: 10px;\n    margin-bottom: 0;\n  }\n\n  ${device.mobileL} {\n    height: ${GRID_HEIGHT};\n    flex-direction: column;\n    padding-top: 0;\n    padding-left: 10px;\n    margin-right: 0;\n  }\n`;\n\nexport default LegendContainer;\n","import React from \"react\";\n\nimport StyledCell from \"./styled/Cell.styled\";\nimport LegendContainer from \"./styled/LegendContainer.styled\";\n\nconst Legend: React.FC = () => (\n  <LegendContainer>\n    <StyledCell top topLeft>\n      Âge\n    </StyledCell>\n    <StyledCell>Poids attendu</StyledCell>\n    <StyledCell bottomLeft>Poids mesuré</StyledCell>\n  </LegendContainer>\n);\n\nexport default Legend;\n","import styled from \"styled-components\";\n\nimport device from \"../../styles/medias\";\n\nconst DataGridContainer = styled.div`\n  display: flex;\n  margin: auto;\n  overflow-x: auto;\n\n  background-color: transparent;\n\n  ${device.mobile} {\n    flex-direction: column;\n  }\n\n  ${device.mobileL} {\n    padding-right: 10px;\n    flex-direction: row;\n  }\n`;\n\nexport default DataGridContainer;\n","import { Column } from \"./Data.interface\";\n\nconst validateColumn = (column: Column): boolean => {\n  const { age, expectedWeight, measuredWeight } = column;\n  if (!age || !expectedWeight || !measuredWeight) {\n    return false;\n  }\n\n  // expected weight must be greater than measuredWeight\n  if (Number(expectedWeight) < Number(measuredWeight)) {\n    return false;\n  }\n\n  // age must be in month\n  if (Number(age) > 50) {\n    return false;\n  }\n\n  return true;\n};\n\nexport default validateColumn;\n","import styled from \"styled-components\";\n\nconst AreaContainer = styled.div`\n  margin-top: 15px;\n  text-align: center;\n  background-color: transparent;\n`;\n\nexport default AreaContainer;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport device from \"../styles/medias\";\n\ninterface Props {\n  isPeriodValid: boolean;\n  value: string;\n  updateValue: (value: string) => void;\n}\n\nconst InlineInput: React.FC<Props> = (props: Props) => {\n  const { isPeriodValid, value, updateValue } = props;\n\n  const handleChange = (event: React.FormEvent<HTMLInputElement>) => {\n    const { value: newValue } = event.currentTarget;\n    if (/[\\d.,]*/i.exec(newValue)) {\n      const formattedValue = newValue.replace(\",\", \".\");\n      updateValue(formattedValue);\n    }\n  };\n\n  return (\n    <StyledInput\n      isPeriodValid={isPeriodValid}\n      type=\"string\"\n      value={value.replace(\".\", \",\")}\n      onChange={handleChange}\n    />\n  );\n};\n\ninterface StyledInputProps {\n  readonly isPeriodValid: boolean;\n}\n\nconst StyledInput = styled.input<StyledInputProps>`\n  align-items: center;\n  background-color: transparent;\n  border-style: solid;\n  border-width: 0px;\n  border-bottom-width: 2px;\n  border-bottom-color: ${(props) =>\n    props.isPeriodValid ? props.theme.colors.green : props.theme.colors.orange};\n\n  color: ${(props) => props.theme.colors.darkGrey};\n  font-family: ${(props) => props.theme.fonts.main};\n  font-weight: 600;\n  justify-content: \"flex-start\";\n\n  width: 40px;\n  margin-right: 2px;\n  margin-left: 2px;\n  text-align: center;\n  padding: 0px;\n\n  &:hover {\n    cursor: pointer;\n  }\n\n  ${device.mobile} {\n    font-size: 14px;\n  }\n\n  ${device.desktop} {\n    font-size: 16px;\n  }\n`;\n\nexport default InlineInput;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport AreaContainer from \"./AreaContainer\";\nimport InlineInput from \"./InlineInput\";\n\nimport device from \"../styles/medias\";\n\ninterface Props {\n  from: string;\n  isPeriodValid: boolean;\n  setFrom: React.Dispatch<React.SetStateAction<string>>;\n  setTo: React.Dispatch<React.SetStateAction<string>>;\n  to: string;\n}\n\nconst areaLegend = \"Calculer l'aire sous la courbe entre \";\nconst areaLegendMobile1 = \"Calculer l'aire sous la courbe\";\nconst areaLegendMobile2 = \"entre \";\nconst areaLegendJunction = \" et \";\nconst areaLegendEnd = \" ans. \";\n\nconst Area: React.FC<Props> = (props: Props) => {\n  const { from, isPeriodValid, setFrom, setTo, to } = props;\n  const screenWidth = window.innerWidth;\n  console.info(screenWidth);\n  const isMobile = screenWidth < 500;\n\n  // correctly split the text on mobile\n  if (isMobile) {\n    return (\n      <AreaContainer>\n        <Text>{areaLegendMobile1}</Text>\n        <Text>\n          {areaLegendMobile2}\n          <InlineInput\n            isPeriodValid={isPeriodValid}\n            value={from}\n            updateValue={setFrom}\n          />\n          {areaLegendJunction}\n          <InlineInput\n            isPeriodValid={isPeriodValid}\n            value={to}\n            updateValue={setTo}\n          />\n          {areaLegendEnd}\n        </Text>\n      </AreaContainer>\n    );\n  }\n\n  return (\n    <AreaContainer>\n      <Text>\n        {areaLegend}\n        <InlineInput\n          isPeriodValid={isPeriodValid}\n          value={from}\n          updateValue={setFrom}\n        />\n        {areaLegendJunction}\n        <InlineInput\n          isPeriodValid={isPeriodValid}\n          value={to}\n          updateValue={setTo}\n        />\n        {areaLegendEnd}\n      </Text>\n    </AreaContainer>\n  );\n};\n\nconst Text: React.FC = styled.p`\n  color: ${(props) => props.theme.colors.darkGrey};\n  font-family: ${(props) => props.theme.fonts.main};\n  font-weight: 400;\n  text-align: \"center\";\n  background-color: \"transparent\";\n  margin: 0;\n\n  ${device.mobile} {\n    font-size: 14px;\n  }\n\n  ${device.desktop} {\n    font-size: 18px;\n  }\n`;\n\nexport default Area;\n","export interface Interval {\n  slope: number;\n  xEnd: number; // from the interval\n  xStart: number; // from the interval\n  intercept: number;\n}\n\nexport interface Period {\n  from: string;\n  isPeriodValid: boolean;\n  to: string;\n}\n\nexport enum PeriodStatus {\n  Default,\n  Valid,\n  Wrong,\n}\n\nexport interface StudiedIntervals {\n  intervalYEndExpected: number;\n  intervalYStartExpected: number;\n  intervalYEndMeasured: number;\n  intervalYStartMeasured: number;\n}\n","import styled from \"styled-components\";\n\nimport { CARD_BORDER_RADIUS, CARD_WIDTH } from \"../styles/constants\";\nimport device from \"../styles/medias\";\nimport theme from \"../styles/theme\";\n\nconst DataCard: React.FC = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: safe center;\n  justify-content: safe center;\n\n  background-color: ${(props) => props.theme.backgroundColors.card};\n  margin: 10px auto 30px auto;\n  /* padding: 10px; */\n\n  box-shadow: 0px 0px 10px ${theme.colors.lightestGrey};\n  border-radius: ${CARD_BORDER_RADIUS};\n  border: 1px solid ${theme.colors.lightestGrey};\n  width: ${CARD_WIDTH};\n\n  padding-bottom: 15px;\n\n  ${device.mobile} {\n    padding-top: 20px;\n  }\n\n  ${device.desktop} {\n    padding-top: 30px;\n  }\n`;\n\nexport default DataCard;\n","const CARD_WIDTH = \"90%\";\nconst CARD_BORDER_RADIUS = \"6px\";\n\nexport { CARD_WIDTH, CARD_BORDER_RADIUS };\n","import styled from \"styled-components\";\n\nimport device from \"../styles/medias\";\n\nconst ResultContainer = styled.div`\n  margin: \"\";\n  background-color: transparent;\n  text-align: center;\n\n  ${device.mobile} {\n    padding-left: 5px;\n    padding-right: 5px;\n  }\n\n  ${device.desktop} {\n    padding-left: 10px;\n    padding-right: 10px;\n  }\n`;\n\nexport default ResultContainer;\n","import styled from \"styled-components\";\n\nimport device from \"../../styles/medias\";\n\ninterface Props {\n  readonly bold?: boolean;\n  readonly margin?: string;\n}\n\nconst H3 = styled.p<Props>`\n  color: ${(props) => props.color || props.theme.colors.darkGrey};\n  font-family: ${(props) => props.theme.fonts.main};\n  font-weight: ${(props) => (props.bold ? 600 : 400)};\n  margin: ${(props) => (props.margin ? props.margin : 0)};\n  padding: 0;\n  text-align: \"center\";\n  background-color: \"transparent\";\n\n  ${device.mobile} {\n    font-size: 14px;\n  }\n\n  ${device.desktop} {\n    font-size: 18px;\n  }\n`;\n\nexport default H3;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport { Period } from \"./Area.interface\";\nimport ResultContainer from \"./ResultContainer.styled\";\n\nimport H3 from \"../components/common/H3.styled\";\n\ninterface Props {\n  area: string;\n  period: Period;\n}\n\nconst invalidDataText =\n  \"Insérez vos données ci-dessous pour évaluer le risque d'arrêt de croissance. \" +\n  \"Les âges doivent être en années et les poids en kg. \" +\n  \"Enfin, sélectionnez l'intervalle à étudier.\";\nconst resultText0 = \"L'aire sous la courbe entre \";\nconst resultText1 = \" et \";\nconst resultText2 = \" ans est égal à \";\nconst resultText3 = \" kg/an.\";\n\nconst Result: React.FC<Props> = (props: Props) => {\n  const { area, period } = props;\n\n  if (!period.isPeriodValid) {\n    return (\n      <ResultContainer>\n        <H3>{invalidDataText}</H3>\n      </ResultContainer>\n    );\n  }\n\n  return (\n    <ResultContainer>\n      <H3>\n        {resultText0}\n        <Bold>{period.from.replace(\".\", \",\")}</Bold>\n        {resultText1}\n        <Bold>{period.to.replace(\".\", \",\")}</Bold>\n        {resultText2}\n        <Bold>{area.replace(\".\", \",\")}</Bold>\n        {resultText3}\n      </H3>\n    </ResultContainer>\n  );\n};\n\nconst Bold: React.FC = styled.span`\n  font-weight: 700;\n`;\n\nexport default Result;\n","import { PeriodStatus } from \"./Area.interface\";\n\nimport { Column } from \"../form/Data.interface\";\n\n/**\n * Checks the correctness of the period input, from must be greater than to\n */\nconst checkPeriodStatus = (\n  columns: Column[],\n  from: string,\n  to: string\n): PeriodStatus => {\n  if (!from || !to) {\n    return PeriodStatus.Default;\n  }\n\n  // TODO: validation définitive horizontale\n\n  const ages = columns.map((column) => Number(column.age));\n  // check that the lower boundary is greater than or equal to the earliest age provided\n  if (Number(from) < Math.min(...ages)) {\n    return PeriodStatus.Wrong;\n  }\n\n  // check that the lower boundary is greater than or equal to the earliest age provided\n  if (Number(to) > Math.max(...ages)) {\n    return PeriodStatus.Wrong;\n  }\n\n  if (Number(from) < Number(to)) {\n    return PeriodStatus.Valid;\n  }\n\n  return PeriodStatus.Wrong;\n};\n\nexport default checkPeriodStatus;\n","import { Interval } from \"./Area.interface\";\n\nconst integrate = (interval: Interval): number => {\n  const { intercept, slope, xStart, xEnd } = interval;\n  // we integrate affine functions for each interval\n  function f(x: number) {\n    return Number((slope * x + intercept).toFixed(4));\n  }\n\n  let total = 0;\n  const step = 0.01;\n  for (let x = xStart; x < xEnd; x += step) {\n    total += f(x + step / 2) * step;\n  }\n  return total;\n};\n\nexport default integrate;\n","import { useState } from \"react\";\n\nimport { Interval, Period, StudiedIntervals } from \"./Area.interface\";\nimport integrate from \"./integrate\";\n\nimport { Column } from \"../form/Data.interface\";\n\ninterface BothIntervals {\n  expectedWeightInterval: Interval;\n  measuredWeightInterval: Interval;\n}\n\ninterface Area {\n  area: string;\n  studiedIntervals: StudiedIntervals;\n}\n\nconst useAreaBetweenCurves = (columns: Column[], period: Period): Area => {\n  // prendre en compte l'intervalle étudié +++\n  const intervals: BothIntervals[] = [];\n  const [area, setArea] = useState(\"\");\n  const [intervalYStartExpected, setIntervalYStartExpected] = useState(0);\n  const [intervalYEndExpected, setIntervalYEndExpected] = useState(0);\n  const [intervalYStartMeasured, setIntervalYStartMeasured] = useState(0);\n  const [intervalYEndMeasured, setIntervalYEndMeasured] = useState(0);\n\n  if (period.isPeriodValid) {\n    // select the intervals on which to run the integration\n    for (let i = 0; i < columns.length - 1; i += 1) {\n      const xStartFromColumn = Number(columns[i].age);\n      const xEndFromColumn = Number(columns[i + 1].age);\n      const yEndFromColumnExpected = Number(columns[i + 1].expectedWeight);\n      const yEndFromColumnMeasured = Number(columns[i + 1].measuredWeight);\n      const yStartFromColumnExpected = Number(columns[i].expectedWeight);\n      const yStartFromColumnMeasured = Number(columns[i].measuredWeight);\n\n      // skip this interval if we do not want to integrate it\n      if (\n        xEndFromColumn < Number(period.from) ||\n        xStartFromColumn > Number(period.to)\n      ) {\n        continue;\n      }\n\n      // compute the slopes\n      const expectedWeightSlope =\n        (yEndFromColumnExpected - yStartFromColumnExpected) /\n        (xEndFromColumn - xStartFromColumn);\n      const measuredWeightSlope =\n        (yEndFromColumnMeasured - yStartFromColumnMeasured) /\n        (xEndFromColumn - xStartFromColumn);\n\n      // then the intercepts with the starting points\n      const expectedWeightIntercept =\n        yStartFromColumnExpected - expectedWeightSlope * xStartFromColumn;\n      const measuredWeightIntercept =\n        yStartFromColumnMeasured - measuredWeightSlope * xStartFromColumn;\n\n      // select xStart and xEnd\n      let xStart;\n      if (Number(period.from) < xStartFromColumn) {\n        xStart = xStartFromColumn;\n      } else {\n        xStart = Number(period.from);\n        const newIntervalYStartExpected =\n          expectedWeightSlope * Number(period.from) + expectedWeightIntercept;\n        const newIntervalYStartMeasured =\n          measuredWeightSlope * Number(period.from) + measuredWeightIntercept;\n        if (newIntervalYStartExpected !== intervalYStartExpected) {\n          setIntervalYStartExpected(newIntervalYStartExpected);\n        }\n        if (newIntervalYStartMeasured !== intervalYStartMeasured) {\n          setIntervalYStartMeasured(newIntervalYStartMeasured);\n        }\n      }\n\n      let xEnd;\n      if (Number(period.to) > xEndFromColumn) {\n        xEnd = xEndFromColumn;\n      } else {\n        xEnd = Number(period.to);\n        const newIntervalYEndExpected =\n          expectedWeightSlope * Number(period.to) + expectedWeightIntercept;\n        const newIntervalYEndMeasured =\n          measuredWeightSlope * Number(period.to) + measuredWeightIntercept;\n        if (newIntervalYEndExpected !== intervalYEndExpected) {\n          setIntervalYEndExpected(newIntervalYEndExpected);\n        }\n        if (newIntervalYEndMeasured !== intervalYEndMeasured) {\n          setIntervalYEndMeasured(newIntervalYEndMeasured);\n        }\n      }\n\n      intervals.push({\n        expectedWeightInterval: {\n          slope: expectedWeightSlope,\n          xEnd,\n          xStart,\n          intercept: expectedWeightIntercept,\n        },\n        measuredWeightInterval: {\n          slope: measuredWeightSlope,\n          xEnd,\n          xStart,\n          intercept: measuredWeightIntercept,\n        },\n      });\n    }\n\n    // perform integration on all intervals successively\n    const result = intervals.reduce((area, interval) => {\n      const intervalArea =\n        integrate(interval.expectedWeightInterval) -\n        integrate(interval.measuredWeightInterval);\n      return area + intervalArea;\n    }, 0);\n    const formattedResult = result.toFixed(3);\n\n    if (formattedResult !== area) {\n      setArea(formattedResult);\n    }\n  }\n\n  return {\n    area,\n    studiedIntervals: {\n      intervalYStartExpected,\n      intervalYEndExpected,\n      intervalYStartMeasured,\n      intervalYEndMeasured,\n    },\n  };\n};\n\nexport default useAreaBetweenCurves;\n","import { Column } from \"../form/Data.interface\";\n\ninterface DisplayableData {\n  ages: number[];\n  expectedWeights: number[];\n  measuredWeights: number[];\n}\n\n/**\n * Prepares the arrays for the charts\n * Only keeps valid columns\n * Columns are validated independently in DataColumn\n */\nconst filterColumns = (columns: Column[]): DisplayableData => {\n  const filteredData = columns.filter((dataPoint) => {\n    return dataPoint.isValidated;\n  });\n\n  const ages = filteredData.map((dataPoint) => Number(dataPoint.age));\n  const expectedWeights = filteredData.map((dataPoint) =>\n    Number(dataPoint.expectedWeight)\n  );\n  const measuredWeights = filteredData.map((dataPoint) =>\n    Number(dataPoint.measuredWeight)\n  );\n\n  return { ages, expectedWeights, measuredWeights };\n};\n\nexport default filterColumns;\n","import cloneDeep from \"lodash.clonedeep\";\n\nimport { Period, StudiedIntervals } from \"../area/Area.interface\";\n\nexport interface PlotData {\n  x: number;\n  y: number;\n}\n\ninterface StudiedData {\n  studiedDataExpected: PlotData[];\n  studiedDataMeasured: PlotData[];\n  updatedExpectedWeights: number[];\n  updatedMeasuredWeights: number[];\n}\n\nconst getStudiedData = (\n  ages: number[],\n  expectedWeights: number[],\n  measuredWeights: number[],\n  period: Period,\n  studiedIntervals: StudiedIntervals\n): StudiedData => {\n  const {\n    intervalYEndExpected,\n    intervalYStartExpected,\n    intervalYEndMeasured,\n    intervalYStartMeasured,\n  } = studiedIntervals;\n\n  const updatedExpectedWeights = cloneDeep(expectedWeights);\n  const updatedMeasuredWeights = cloneDeep(measuredWeights);\n\n  let startIndex = ages.findIndex((age) => age === Number(period.from));\n  let endIndex = ages.findIndex((age) => age === Number(period.to));\n  if (!ages.includes(Number(period.from))) {\n    ages.push(Number(period.from));\n    ages.sort((a, b) => a - b);\n    startIndex = ages.findIndex((age) => age === Number(period.from));\n    // pushes the y coordinates at the right place\n    updatedExpectedWeights.splice(startIndex, 0, intervalYStartExpected);\n    updatedMeasuredWeights.splice(startIndex, 0, intervalYStartMeasured);\n  }\n  if (!ages.includes(Number(period.to))) {\n    ages.push(Number(period.to));\n    ages.sort((a, b) => a - b);\n    endIndex = ages.findIndex((age) => age === Number(period.to));\n    // pushes the y coordinates at the right place\n    updatedExpectedWeights.splice(endIndex, 0, intervalYEndExpected);\n    updatedMeasuredWeights.splice(endIndex, 0, intervalYEndMeasured);\n  }\n\n  // compute studiedDataset coordinates, excluding points\n  const studiedAges = cloneDeep(ages);\n  const studiedWeightsExpected = cloneDeep(updatedExpectedWeights);\n  const studiedWeightsMeasured = cloneDeep(updatedMeasuredWeights);\n\n  if (startIndex !== 0) {\n    studiedAges.splice(0, startIndex);\n    studiedWeightsExpected.splice(0, startIndex);\n    studiedWeightsMeasured.splice(0, startIndex);\n  }\n\n  // update endIndex\n  endIndex = studiedAges.findIndex((age) => age === Number(period.to));\n  studiedAges.splice(endIndex + 1, studiedAges.length - endIndex);\n  studiedWeightsExpected.splice(\n    endIndex + 1,\n    studiedWeightsExpected.length - endIndex\n  );\n  studiedWeightsMeasured.splice(\n    endIndex + 1,\n    studiedWeightsMeasured.length - endIndex\n  );\n\n  const studiedDataExpected = studiedWeightsExpected.map((weight, index) => {\n    return { x: studiedAges[index], y: weight };\n  });\n  const studiedDataMeasured = studiedWeightsMeasured.map((weight, index) => {\n    return { x: studiedAges[index], y: weight };\n  });\n\n  return {\n    studiedDataExpected,\n    studiedDataMeasured,\n    updatedExpectedWeights,\n    updatedMeasuredWeights,\n  };\n};\n\nexport default getStudiedData;\n","/* eslint-disable @typescript-eslint/ban-ts-comment */\nimport * as chartjs from \"chart.js\";\nimport cloneDeep from \"lodash.clonedeep\";\nimport React from \"react\";\nimport { ChartData, Line } from \"react-chartjs-2\";\n\nimport filterColumns from \"./filterColumns\";\nimport getStudiedData, { PlotData } from \"./getStudiedData\";\n\nimport { Period, StudiedIntervals } from \"../area/Area.interface\";\nimport { Column } from \"../form/Data.interface\";\nimport theme from \"../styles/theme\";\n\ninterface Props {\n  columns: Column[];\n  studiedIntervals: StudiedIntervals;\n  period: Period;\n}\n\nconst { beige, orange, yellow, chartRed, chartBlue } = theme.colors;\n\nconst Charts: React.FC<Props> = (props: Props) => {\n  const { columns, studiedIntervals, period } = props;\n\n  // only keep the valid and completed columns\n  const { ages, expectedWeights, measuredWeights } = filterColumns(columns);\n\n  let definitiveExpectedWeights = cloneDeep(expectedWeights);\n  let definitiveMeasuredWeights = cloneDeep(measuredWeights);\n\n  let studiedDatasetExpected: PlotData[] = [];\n  let studiedDatasetMeasured: PlotData[] = [];\n  if (period.isPeriodValid) {\n    const studiedData = getStudiedData(\n      ages,\n      expectedWeights,\n      measuredWeights,\n      period,\n      studiedIntervals\n    );\n    const {\n      studiedDataExpected,\n      studiedDataMeasured,\n      updatedExpectedWeights,\n      updatedMeasuredWeights,\n    } = studiedData;\n    studiedDatasetExpected = studiedDataExpected;\n    studiedDatasetMeasured = studiedDataMeasured;\n    definitiveExpectedWeights = cloneDeep(updatedExpectedWeights);\n    definitiveMeasuredWeights = cloneDeep(updatedMeasuredWeights);\n  }\n\n  const expectedWeightsData = definitiveExpectedWeights.map((weight, index) => {\n    return { x: ages[index], y: weight };\n  });\n\n  const measuredWeightsData = definitiveMeasuredWeights.map((weight, index) => {\n    return { x: ages[index], y: weight };\n  });\n\n  const baseDatasets = [\n    {\n      // y coordinates\n      data: studiedDatasetExpected,\n      label: \"Intervalle étudié haut\",\n      backgroundColor: orange, // legend\n\n      fill: +1,\n\n      borderColor: \"black\",\n      borderWidth: 2,\n\n      pointBackgroundColor: orange,\n      pointBorderColor: \"black\",\n      pointBorderWidth: 2,\n      pointRadius: 4,\n\n      pointHitRadius: 10,\n\n      // straight line\n      lineTension: 0,\n\n      // axis references\n      xAxisID: \"x-axis\",\n      yAxisID: \"y-axis\",\n\n      order: 0,\n    },\n    {\n      // y coordinates\n      data: studiedDatasetMeasured,\n      label: \"Intervalle étudié bas\",\n      backgroundColor: beige, // legend\n\n      fill: false,\n\n      borderColor: \"black\",\n      borderWidth: 2,\n\n      pointBackgroundColor: orange,\n      pointBorderColor: \"black\",\n      pointBorderWidth: 2,\n      pointRadius: 4,\n\n      pointHitRadius: 10,\n\n      // straight line\n      lineTension: 0,\n\n      // axis references\n      xAxisID: \"x-axis\",\n      yAxisID: \"y-axis\",\n\n      order: 1,\n    },\n    {\n      // y coordinates\n      data: expectedWeightsData,\n      label: \"Poids attendu\",\n      backgroundColor: yellow, // legend\n\n      fill: 3,\n\n      borderColor: \"black\",\n      borderWidth: 2,\n\n      pointBackgroundColor: chartBlue,\n      pointBorderColor: \"black\",\n      pointBorderWidth: 2,\n      pointRadius: 4,\n\n      pointHitRadius: 10,\n\n      // straight line\n      lineTension: 0,\n\n      // axis references\n      xAxisID: \"x-axis\",\n      yAxisID: \"y-axis\",\n\n      order: 2,\n    },\n    {\n      // y coordinates\n      data: measuredWeightsData,\n      label: \"Poids mesuré\",\n\n      fill: false,\n\n      backgroundColor: chartRed,\n      borderColor: \"black\",\n      borderWidth: 2,\n\n      pointBackgroundColor: chartRed,\n      pointBorderColor: \"black\",\n      pointBorderWidth: 2,\n      pointRadius: 4,\n\n      pointHitRadius: 10,\n\n      lineTension: 0,\n\n      // axis references\n      xAxisID: \"x-axis\",\n      yAxisID: \"y-axis\",\n\n      order: 3,\n    },\n  ];\n\n  const dataToRender: ChartData<chartjs.ChartData> = {\n    datasets: [...baseDatasets],\n  };\n\n  return (\n    <Line\n      data={dataToRender}\n      options={{\n        // aspectRatio: 1,\n        maintainAspectRatio: true,\n        legend: {\n          display: false,\n        },\n        tooltips: {\n          enabled: true,\n          mode: \"x\",\n        },\n        layout: {\n          padding: {\n            left: -10,\n            right: 30,\n            top: 0,\n            bottom: 0,\n          },\n        },\n        scales: {\n          yAxes: [\n            {\n              id: \"y-axis\",\n              // type: \"linear\",\n              scaleLabel: {\n                display: true,\n              },\n              ticks: {\n                autoSkip: true,\n                // suggestedMin: 10,\n                // suggestedMax: 40,\n                maxTicksLimit: 6,\n              },\n            },\n          ],\n          xAxes: [\n            {\n              id: \"x-axis\",\n              type: \"linear\" /* <--- this */,\n              scaleLabel: {\n                display: true,\n              },\n              ticks: {\n                autoSkip: true,\n                // suggestedMin: 5,\n                // suggestedMax: 15,\n                maxTicksLimit: 10,\n              },\n            },\n          ],\n        },\n      }}\n    />\n  );\n};\n\nexport default Charts;\n","import styled from \"styled-components\";\n\nimport { CARD_BORDER_RADIUS, CARD_WIDTH } from \"../styles/constants\";\nimport device from \"../styles/medias\";\nimport theme from \"../styles/theme\";\n\nconst ChartCard: React.FC = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: safe center;\n  justify-content: safe center;\n\n  background-color: ${(props) => props.theme.backgroundColors.card};\n  margin: 10px auto 30px auto;\n\n  box-shadow: 0px 0px 10px ${theme.colors.lightestGrey};\n  border-radius: ${CARD_BORDER_RADIUS};\n  border: 1px solid ${theme.colors.lightestGrey};\n  width: ${CARD_WIDTH};\n\n  ${device.mobile} {\n    padding-bottom: 15px;\n    padding-top: 15px;\n  }\n\n  ${device.desktop} {\n    padding-bottom: 20px;\n    padding-top: 30px;\n  }\n`;\n\nexport default ChartCard;\n","import React, { useState } from \"react\";\n\nimport AddData from \"./AddData\";\nimport { Column } from \"./Data.interface\";\nimport DataGrid from \"./DataGrid\";\nimport Legend from \"./Legend\";\nimport DataGridContainer from \"./styled/DataGridContainer.styled\";\nimport validateColumn from \"./validateColumn\";\n\nimport Area from \"../area/Area\";\nimport { Period, PeriodStatus } from \"../area/Area.interface\";\nimport DataCard from \"../area/DataCard.styled\";\nimport Result from \"../area/Result\";\nimport checkPeriodStatus from \"../area/checkPeriodStatus\";\nimport useAreaBetweenCurves from \"../area/useAreaBetweenCurves\";\nimport Chart from \"../chart/Chart\";\nimport ChartCard from \"../chart/ChartCard.styled\";\n\nconst defaultData: Column = {\n  age: \"\",\n  expectedWeight: \"\",\n  isValidated: false,\n  measuredWeight: \"\",\n};\n\nconst Form: React.FC = () => {\n  const initialData: Column[] = [defaultData, defaultData, defaultData];\n  const [columns, setColumns] = useState<Column[]>(initialData);\n  const [from, setFrom] = useState<string>(\"\");\n  const [isPeriodValid, setIsPeriodValid] = useState<boolean>(false);\n  const [to, setTo] = useState<string>(\"\");\n\n  const period: Period = { from, isPeriodValid, to };\n  const { area, studiedIntervals } = useAreaBetweenCurves(columns, period);\n\n  const addColumn = () => {\n    const newData = [...columns, defaultData];\n    setColumns(newData);\n  };\n\n  // TODO: validation définitive horizontale (les ages doivent être impérativement croissants)\n  const status = checkPeriodStatus(columns, from, to);\n  const updatedIsPeriodValid = status === PeriodStatus.Valid;\n  if (isPeriodValid !== updatedIsPeriodValid) {\n    setIsPeriodValid(updatedIsPeriodValid);\n  }\n\n  const updateColumn = (columnData: Column, index: number) => {\n    const newData = [...columns];\n    newData[index] = columnData;\n    setColumns(newData);\n  };\n\n  // update the validation status of the column if necessary\n  columns.forEach((column, index) => {\n    const isColumnValid = validateColumn(column);\n    if (isColumnValid !== column.isValidated) {\n      const updatedColumn = { ...column };\n      updatedColumn.isValidated = isColumnValid;\n      updateColumn(updatedColumn, index);\n    }\n  });\n\n  // TODO: validation horizontale complète: âges croissants et toutes colonnes valides\n  // minimum 2 colonnes bien sûr\n  return (\n    <>\n      <ChartCard>\n        <Chart\n          columns={columns}\n          studiedIntervals={studiedIntervals}\n          period={period}\n        />\n        <Result area={area} period={period} />\n      </ChartCard>\n      <DataCard>\n        <DataGridContainer>\n          <Legend />\n          <DataGrid data={columns} updateColumn={updateColumn} />\n          {columns.length < 11 && <AddData addColumn={addColumn} />}\n        </DataGridContainer>\n        <Area\n          from={from}\n          isPeriodValid={isPeriodValid}\n          setFrom={setFrom}\n          setTo={setTo}\n          to={to}\n        />\n      </DataCard>\n    </>\n  );\n};\n\nexport default Form;\n","import React from \"react\";\nimport { ThemeProvider } from \"styled-components\";\n\nimport AppContainer from \"./AppContainer.styled\";\nimport ContentContainer from \"./ContentContainer.styled\";\nimport Title from \"./components/Title\";\nimport Form from \"./form/Form\";\nimport theme from \"./styles/theme\";\n\n// TODO: a component for each type of cell (age, expected and actual weight)\n// weight should be the same component but with a different state\n// finally, group the 3 cells in a single component, and perform the checks at this level\n// add legend cells\n// add interval selection with associated checks\n// bonus: graphic representation with react-chartjs-2\n\nconst App: React.FC = () => {\n  return (\n    <ThemeProvider theme={theme}>\n      <AppContainer>\n        <ContentContainer>\n          <Title />\n          <Form />\n          {/* <About /> a few words about the study  */}\n        </ContentContainer>\n      </AppContainer>\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}